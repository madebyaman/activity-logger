// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  password  String
  activity  Activity[]
  DailyLog  DailyLog[]
  Profile   Profile[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Log       Log[]
}

// So dailyLog will have date, logs, userID
// logs will have hour, from, to, activity
// So this way, we will have unique date and can get logs for any date.

model DailyLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      String   @unique
  // Why string and not datetime? B/c new Date() gives a unique date with milliseconds. Storing it in string as `dd/mm/yyy` will allow me to compare these value easily.
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  log       Log[]
}

model Profile {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  noOfBlocksPerHour Int
  sleepFrom         Int
  sleepTo           Int
  user              User     @relation(fields: [userId], references: [id])
  userId            Int      @unique
}

model Log {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  from       DateTime
  to         DateTime
  hour       Int
  activity   Activity? @relation(fields: [activityId], references: [id])
  date       DailyLog  @relation(fields: [dailyLogId], references: [id])
  activityId Int
  dailyLogId Int
}
